// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurant.UsersApp.Infrastructure.EFCore.Context;

#nullable disable

namespace Acc.Infrastructure.EFCore.Migrations
{
    [DbContext(typeof(AccContext))]
    partial class AccContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Acc.Domain.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "59ef6387-d9d6-4abc-8d9b-d6866de4ad2a",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = "e1263198-f41f-4b0c-86e1-ee8f409b588a",
                            RoleName = "Kitchen"
                        },
                        new
                        {
                            Id = "8ffc6ae4-656b-4e9d-b50c-51478010667e",
                            RoleName = "FrontDesk"
                        });
                });

            modelBuilder.Entity("Acc.Domain.Models.UserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Acc.Domain.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("PhoneConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "046c8ee8-8d71-43f1-9a0a-72f7b72a82a2",
                            Email = "Admin@gmail.com",
                            Password = "ea661MuJdwQ2K0rmZRlEz7xcXpadVVD+FQ5prf2UBAA=",
                            PhoneConfirmed = false,
                            PhoneNumber = "111111",
                            UserName = "Manager"
                        },
                        new
                        {
                            Id = "b57448c6-f5c6-4e76-9d83-3b082af08123",
                            Email = "Kitchen@gmail.com",
                            Password = "ea661MuJdwQ2K0rmZRlEz7xcXpadVVD+FQ5prf2UBAA=",
                            PhoneConfirmed = false,
                            PhoneNumber = "111111",
                            UserName = "Kitchen"
                        },
                        new
                        {
                            Id = "553770b6-d36f-44df-9756-95149a04a5dc",
                            Email = "FrontDesk@gmail.com",
                            Password = "ea661MuJdwQ2K0rmZRlEz7xcXpadVVD+FQ5prf2UBAA=",
                            PhoneConfirmed = false,
                            PhoneNumber = "111111",
                            UserName = "FrontDesk"
                        });
                });

            modelBuilder.Entity("Acc.Domain.Models.UserRole", b =>
                {
                    b.HasOne("Acc.Domain.Models.Role", "RoleModel")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acc.Domain.Models.Users", "UserModel")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Acc.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Acc.Domain.Models.Users", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
